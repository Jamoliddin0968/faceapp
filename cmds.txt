    def create_attendance_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''CREATE TABLE IF NOT EXISTS attendance
                          (id INTEGER PRIMARY KEY AUTOINCREMENT,
                           name TEXT,
                           date DATE,
                           status TEXT)''')
        self.conn.commit()



    def recognize_faces(self):

        # Show progress indicator
        self.progress.start()

        frame = None
        for _ in range(20):  # Read and skip 9 frames
        
            ret, frame = self.cap.read()


        face_locations = face_recognition.face_locations(frame)
        face_encodings = face_recognition.face_encodings(frame, face_locations)

        for (top, right, bottom, left), face_encoding in zip(face_locations, face_encodings):
            matches = face_recognition.compare_faces(self.known_face_encodings, face_encoding)
            name = "Unknown"
            if True in matches:
                first_match_index = matches.index(True)
                name = self.known_face_names[first_match_index]
            if not name=="Unknown":
                if not self.is_attendance_marked(name):
                    # Mark attendance for the user
                    self.mark_attendance(name)
            cv2.rectangle(frame, (left, top), (right, bottom), (0, 0, 255), 2)
            cv2.putText(frame, name, (left + 6, bottom - 6), cv2.FONT_HERSHEY_DUPLEX, 0.5, (255, 255, 255), 1)

        img = Image.fromarray(frame)
        img = ImageTk.PhotoImage(image=img)
        self.label.imgtk = img
        self.label.configure(image=img)

        # Hide progress indicator
        self.progress.stop()
        self.progress.pack_forget()

        # Repeat the process
        self.root.after(10, self.recognize_faces)

    def is_attendance_marked(self, name):
        current_date = datetime.now().strftime("%Y-%m-%d")
        cursor = self.conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM attendance WHERE name = ? AND date = ?", (name, current_date))
        count = cursor.fetchone()[0]
        cursor.close()
        return count > 0

    def get_today_attendance(self):
        current_date = datetime.now().strftime("%Y-%m-%d")
        conn = sqlite3.connect("attendance.db")
        cursor = conn.cursor()
        cursor.execute("SELECT name, status,date FROM attendance WHERE date = ?", (current_date,))
        today_attendance = cursor.fetchall()
        conn.close()
        return today_attendance

    
    def show_today_attendance(self):
        # Fetch today's attendance data from the database
        today_attendance = self.get_today_attendance()

        # Create a new window for displaying attendance data
        attendance_window = tk.Toplevel(self.root)
        attendance_window.title("Today's Attendance")

        # Create a Treeview widget to display the attendance data as a table
        tree = ttk.Treeview(attendance_window, columns=('Name', 'Status', 'Date'), show='headings')
        tree.heading('Name', text='Name')
        tree.heading('Status', text='Status')
        tree.heading('Date', text='Date')

        # Insert data into the Treeview
        for name, status, date in today_attendance:
            tree.insert('', 'end', values=(name, status, date))

        tree.pack(expand=True, fill='both')

    def mark_attendance(self, name):
        current_date = datetime.now().strftime("%Y-%m-%d")
        cursor = self.conn.cursor()
        cursor.execute("INSERT INTO attendance (name, date, status) VALUES (?, ?, ?)", (name, current_date, 'Active'))
        self.conn.commit()
        cursor.close()
